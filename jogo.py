import streamlit as st
import re
from datetime import datetime
import io
import csv
import math

# ------------------------------
# FUN√á√ïES AUXILIARES
# ------------------------------

def validar_email(email):
    """Valida o formato de um e-mail."""
    regex = r"[^@]+@[^@]+\.[^@]+"
    return re.match(regex, email)

def get_icon(interest):
    """Retorna um emoji consoante o interesse."""
    i = interest.lower()
    if "cinema" in i:
        return "üé¨"
    elif "m√∫sica" in i:
        return "üéµ"
    elif "fotografia" in i:
        return "üì∑"
    elif any(x in i for x in ["arte", "design", "ilustra√ß√£o", "pintura", "escultura", "moda", "anima√ß√£o", "publicidade", "comunica√ß√£o visual", "arquitetura"]):
        return "üé®"
    elif any(x in i for x in ["programa√ß√£o", "software", "jogos", "rob√≥tica", "intelig√™ncia artificial", "ciberseguran√ßa", "hardware", "redes"]):
        return "üíª"
    elif any(x in i for x in ["empreendedorismo", "neg√≥cios", "finan√ßas", "investimentos", "marketing", "planeamento", "gest√£o"]):
        return "üíº"
    elif any(x in i for x in ["psicologia", "comportamento", "neuro", "bem-estar", "autoconhecimento", "sociologia", "antropologia"]):
        return "üß†"
    elif any(x in i for x in ["servi√ßo social", "direitos", "comunit√°rio", "voluntariado", "sustentabilidade", "cidadania", "educa√ß√£o", "pol√≠ticas"]):
        return "ü§ù"
    elif any(x in i for x in ["comunica√ß√£o empresarial", "rela√ß√µes p√∫blicas", "m√≠dias sociais", "eventos", "branding", "networking", "lideran√ßa"]):
        return "üì¢"
    elif any(x in i for x in ["reportagem", "investiga√ß√£o", "jornalismo", "reda√ß√£o", "telejornalismo", "entrevistas"]):
        return "üì∞"
    else:
        return "‚≠ê"

def toggle_interest(interest):
    """Adiciona ou remove um interesse da lista."""
    if interest in st.session_state.selected_interesses:
        st.session_state.selected_interesses.remove(interest)
    else:
        st.session_state.selected_interesses.append(interest)

def obter_cursos_recomendados(selecionados):
    """Calcula os cursos recomendados com base numa l√≥gica de pontua√ß√£o ponderada."""
    recomendados = {}
    for curso, keywords in course_keywords.items():
        score = 0
        for inter in selecionados:
            inter_clean = inter.lower().strip()
            for kw in keywords:
                kw_clean = kw.lower().strip()
                if inter_clean == kw_clean:
                    score += 2  # correspond√™ncia exata
                elif kw_clean in inter_clean:
                    score += 1  # correspond√™ncia parcial
        if score > 0:
            recomendados[curso] = score
    return recomendados

# ------------------------------
# CONFIGURA√á√ÉO INICIAL
# ------------------------------
st.set_page_config(page_title="Orienta√ß√£o Vocacional", layout="wide")

# Inicializa√ß√£o das vari√°veis de sess√£o
if "page" not in st.session_state:
    st.session_state.page = "inicio"
if "selected_interesses" not in st.session_state:
    st.session_state.selected_interesses = []
if "verInteressesDev" not in st.session_state:
    st.session_state.verInteressesDev = False
if "dados_utilizadores" not in st.session_state:
    st.session_state.dados_utilizadores = []
if "mostrar_download" not in st.session_state:
    st.session_state.mostrar_download = False

# Lista de interesses reduzida (20 cart√µes)
interesses = [
    "Arte Digital",
    "Design Gr√°fico",
    "Fotografia",
    "Cinema",
    "M√∫sica",
    "Programa√ß√£o",
    "Desenvolvimento de Software",
    "Jogos Digitais",
    "Empreendedorismo",
    "Marketing Digital",
    "Psicologia",
    "Servi√ßo Social",
    "Comunica√ß√£o Empresarial",
    "Jornalismo",
    "Realidade Virtual",
    "Rob√≥tica",
    "Arquitetura",
    "Moda",
    "Publicidade",
    "Redes de Computadores"
]

# Lista de cursos dispon√≠veis
cursos = [
    "Design de Comunica√ß√£o",
    "Multim√©dia",
    "Jornalismo",
    "Comunica√ß√£o Empresarial",
    "Empreendedorismo",
    "Gest√£o",
    "Gest√£o de Recursos Humanos",
    "Psicologia",
    "Servi√ßo Social",
    "Inform√°tica"
]

# Dicion√°rio de palavras-chave para cada curso
course_keywords = {
    "Design de Comunica√ß√£o": ["arte", "design", "fotografia", "ilustra√ß√£o", "pintura", "escultura", "moda", "publicidade", "comunica√ß√£o visual"],
    "Multim√©dia": ["anima√ß√£o", "cinema", "m√∫sica", "edi√ß√£o de v√≠deo", "multim√©dia", "design gr√°fico", "fotografia"],
    "Jornalismo": ["reportagem", "investiga√ß√£o", "reda√ß√£o", "entrevistas", "m√≠dia digital", "telejornalismo"],
    "Comunica√ß√£o Empresarial": ["comunica√ß√£o empresarial", "marketing", "branding", "rela√ß√µes p√∫blicas", "m√≠dias sociais", "eventos", "networking"],
    "Empreendedorismo": ["empreendedorismo", "startups", "inova√ß√£o", "neg√≥cios", "planeamento estrat√©gico"],
    "Gest√£o": ["gest√£o", "planeamento", "lideran√ßa", "gest√£o de projectos", "neg√≥cios", "finan√ßas", "investimentos", "economia"],
    "Gest√£o de Recursos Humanos": ["recursos humanos", "forma√ß√£o", "desenvolvimento de talentos", "cultura organizacional", "diversidade", "inclus√£o"],
    "Psicologia": ["psicologia", "comportamento humano", "neuroci√™ncia", "bem-estar", "autoconhecimento"],
    "Servi√ßo Social": ["servi√ßo social", "direitos humanos", "engajamento comunit√°rio", "voluntariado", "sustentabilidade", "cidadania"],
    "Inform√°tica": ["programa√ß√£o", "desenvolvimento de software", "jogos digitais", "realidade virtual", "rob√≥tica", "intelig√™ncia artificial", "ci√™ncia de dados", "ciberseguran√ßa", "hardware", "redes de computadores"]
}

# Dicion√°rio de √≠cones para os cursos
course_icons = {
    "Design de Comunica√ß√£o": "üé®",
    "Multim√©dia": "üñ•Ô∏è",
    "Jornalismo": "üì∞",
    "Comunica√ß√£o Empresarial": "üì¢",
    "Empreendedorismo": "üíº",
    "Gest√£o": "üìä",
    "Gest√£o de Recursos Humanos": "ü§ù",
    "Psicologia": "üß†",
    "Servi√ßo Social": "ü§ù",
    "Inform√°tica": "üíª"
}

# ------------------------------
# P√ÅGINAS
# ------------------------------

# P√°gina 0: Ecr√£ de Boas-Vindas
if st.session_state.page == "inicio":
    # Banner de boas-vindas (full width)
    st.markdown(
        """
        <div style="background-color:#4a90e2; padding:50px; border-radius:10px; text-align:center; color:white;">
            <h1 style="font-size:3em;">Descobre o teu Futuro no ISMT</h1>
            <p style="font-size:1.5em; max-width:800px; margin:0 auto;">
                Bem-vindo(a) ao nosso espa√ßo de Orienta√ß√£o Vocacional! 
                Vem descobrir qual dos nossos cursos combina melhor com os teus interesses 
                e inicia uma jornada que pode mudar o teu futuro. 
                Prepara-te para explorar um mundo de possibilidades e encontrar a forma√ß√£o 
                que mais se adequa a ti!
            </p>
            <img src="https://ismt.pt/ismt/img/logo-ismt.png" alt="Boas-vindas" style="max-width:70%; margin-top:20px;">
            <br><br>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # CSS para estilo do bot√£o principal e do bot√£o de administra√ß√£o
    st.markdown(
        """
        <style>
        /* Bot√£o principal (call-to-action) */
        .main-button .stButton button {
            background-color: #ff7f50;
            color: white;
            font-size: 1.5em;
            font-weight: bold;
            padding: 1em 3em;
            border-radius: 10px;
            border: none;
            box-shadow: 0px 6px 8px rgba(0,0,0,0.3);
            transition: background-color 0.3s ease, transform 0.3s ease;
        }
        .main-button .stButton button:hover {
            background-color: #ff9068;
            transform: scale(1.05);
            cursor: pointer;
        }

        /* Bot√£o discreto (admin) */
        .admin-button .stButton button {
            background-color: transparent;
            color: #aaa;
            font-size: 0.8em;
            text-decoration: underline;
            border: none;
        }
        .admin-button .stButton button:hover {
            color: #888;
            cursor: pointer;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    
    # Bot√£o principal de a√ß√£o, centralizado
    with st.container():
        st.markdown('<div class="main-button" style="text-align:center; margin-top:30px;">', unsafe_allow_html=True)
        if st.button("üìù Indicar os meus Interesses üìù", key="main_button"):
            st.session_state.page = "selecao_interesses"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Espa√ßamento extra
    st.markdown("<br><br>", unsafe_allow_html=True)
    
    # Bot√£o discreto para administra√ß√£o (Descarregar Dados)
    with st.container():
        st.markdown('<div class="admin-button" style="text-align:center;">', unsafe_allow_html=True)
        if st.button("Descarregar Dados (Admin)", key="download_data_button"):
            st.session_state.mostrar_download = True
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Se a op√ß√£o de download foi acionada, solicitar password
    if st.session_state.mostrar_download:
        admin_password = st.text_input("Insira a password de administra√ß√£o", type="password")
        if admin_password == "ismt#2526":
            st.markdown("#### Dados Recolhidos")
            buffer = io.StringIO()
            writer = csv.writer(buffer)
            writer.writerow(["Nome", "Email", "Interesses", "Cursos_Recomendados"])
            for entry in st.session_state.dados_utilizadores:
                writer.writerow([
                    entry["nome"], 
                    entry["email"], 
                    entry["interesses"], 
                    entry["cursos_recomendados"]
                ])
            now = datetime.now()
            date_str = now.strftime("%d%m%Y")
            time_str = now.strftime("%H%M%S")
            filename = f"dados_recolhidos_feira_{date_str}_{time_str}.csv"
            st.download_button("Descarregar Dados", data=buffer.getvalue(), file_name=filename, mime="text/csv")

# P√°gina 1: Sele√ß√£o de Interesses
elif st.session_state.page == "selecao_interesses":
    st.markdown(
        '<div class="main-header"><h1>Seleciona os Teus Interesses</h1><p>Clica nos cart√µes para indicar os teus hobbies!</p></div>',
        unsafe_allow_html=True
    )
    total_interesses = len(interesses)
    colunas_por_linha = 5  # Reduzido para 5 bot√µes por linha
    linhas = math.ceil(total_interesses / colunas_por_linha)

    for i in range(linhas):
        cols = st.columns(colunas_por_linha)
        for j in range(colunas_por_linha):
            index = i * colunas_por_linha + j
            if index < total_interesses:
                inter = interesses[index]
                icon = get_icon(inter)
                label = f"{icon} {inter}"
                if inter in st.session_state.selected_interesses:
                    label = f"‚úÖ {label}"
                cols[j].button(label, key=f"card_{index}", on_click=lambda i=inter: toggle_interest(i))

    if st.session_state.verInteressesDev:
        st.markdown("### Interesses Selecionados:")
        st.write(st.session_state.selected_interesses)
    
    if st.button("Ver cursos compat√≠veis com os meus interesses"):
        st.session_state.page = "resultado_cursos"
        st.rerun()

# P√°gina 2: Resultados e Contacto
elif st.session_state.page == "resultado_cursos":
    st.markdown(
        '<div class="main-header"><h1>Cursos Compat√≠veis no ISMT</h1><p>Estes cursos combinam com os teus interesses!</p></div>',
        unsafe_allow_html=True
    )

    # Bot√£o para voltar √† sele√ß√£o de interesses
    if st.button("Voltar √† sele√ß√£o de interesses"):
        st.session_state.page = "selecao_interesses"
        st.rerun()
    
    recomendados = obter_cursos_recomendados(st.session_state.selected_interesses)
    max_score = max(recomendados.values()) if recomendados else 0
    threshold = 0.5 * max_score

    for curso in cursos:
        if curso in recomendados:
            score = recomendados[curso]
            icon = course_icons.get(curso, "‚≠ê")
            if score >= threshold:
                st.markdown(f"**:star: {icon} {curso} (compatibilidade: {score})**")
            else:
                st.markdown(f"{icon} {curso} (compatibilidade: {score})")
        else:
            st.markdown(curso)

    st.markdown("---")
    st.markdown("Para mais informa√ß√µes, indica o teu nome e e-mail:")
    nome = st.text_input("Nome")
    email = st.text_input("E-mail")

    if st.button("Enviar"):
        if nome and email:
            if not validar_email(email):
                st.error("Por favor, introduz um e-mail v√°lido.")
            else:
                cursos_recomendados = ", ".join([
                    f"{curso} ({score})" 
                    for curso, score in sorted(recomendados.items(), key=lambda item: item[1], reverse=True)
                ])
                interesses_selecionados = ", ".join(st.session_state.selected_interesses)
                st.session_state.dados_utilizadores.append({
                    "nome": nome,
                    "email": email,
                    "interesses": interesses_selecionados,
                    "cursos_recomendados": cursos_recomendados
                })
                st.success("Obrigado! Em breve entraremos em contacto.")
        else:
            st.error("Por favor, preenche ambos os campos: nome e e-mail.")

    if st.button("Come√ßar de Novo"):
        st.session_state.selected_interesses = []
        st.session_state.page = "inicio"
        st.session_state.verInteressesDev = False
        st.rerun()
